name: GitHub Onboard Automation

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:  # For manual trigger of workflow
    inputs:
      source_branch:
        description: 'Source Branch'
        required: false

jobs:
  create-repo:
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR was Merged
        id: pr-merged
        run: echo "merged=${{ github.event.pull_request.merged }}" >> $GITHUB_ENV

      - name: Conditional Step
        if: steps.pr-merged.outputs.merged == 'true'
        run: echo "This step will only run if the PR was merged"

      - name: Checkout Source Branch
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.source_branch }}

      - name: Read JSON File
        id: read-json
        run: |
          JSON_FILE=$(find . -name 'nvbugs*.txt' | head -n 1)  # Find the first matching file
          JSON_CONTENT=$(cat "$JSON_FILE")
          echo "json=${JSON_CONTENT}" >> $GITHUB_ENV
        working-directory: ${{ github.workspace }}

      - name: Debug JSON File Content
        run: |
          JSON_FILE=$(find . -name 'nvbugs*.txt' | head -n 1)
          JSON_CONTENT=$(cat "$JSON_FILE")
          echo "File Content:"
          echo "$JSON_CONTENT"
        working-directory: ${{ github.workspace }}

      - name: Parse JSON Data
        id: parse-json
        run: |
          JSON_FILE=$(find . -name 'nvbugs*.txt' | head -n 1)  # Find the first matching file
          if [ -z "$JSON_FILE" ]; then
            echo "No 'nvbugs*.txt' file found in the current directory."
          else
            JSON_CONTENT=$(cat "$JSON_FILE")
            echo "JSON_CONTENT=${JSON_CONTENT}" >> $GITHUB_ENV
            echo "JSON Content (before): $JSON_CONTENT"  # Debugging line
            if [[ -n "$JSON_CONTENT" && "$JSON_CONTENT" != "null" ]]; then
              REPO_NAME=$(echo "$JSON_CONTENT" | jq -r '.repository_name')
              ORG_NAME=$(echo "$JSON_CONTENT" | jq -r '.organization_name')
              REPO_DESC=$(echo "$JSON_CONTENT" | jq -r '.repository_description')
              OWNER_EMAIL=$(echo "$JSON_CONTENT" | jq -r '.nvidia_uploader_email_id')
              COLLABORATORS=$(echo "$JSON_CONTENT" | jq -r '.user_roles[] | select(.role == "write") | .useremail')
              echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
              echo "ORG_NAME=${ORG_NAME}" >> $GITHUB_ENV
              echo "REPO_DESC=${REPO_DESC}" >> $GITHUB_ENV
              echo "OWNER_EMAIL=${OWNER_EMAIL}" >> $GITHUB_ENV
              echo "COLLABORATORS=${COLLABORATORS}" >> $GITHUB_ENV
            else
              echo "JSON data not found or invalid."
            fi
          fi

      - name: Create Repository
        id: create-repo
        run: |
          ORG_NAME="${{ env.ORG_NAME }}"
          REPO_NAME="${{ env.REPO_NAME }}"
          REPO_DESC="${{ env.REPO_DESC }}"
          OWNER_EMAIL="${{ env.OWNER_EMAIL }}"
          COLLABORATORS="${{ env.COLLABORATORS }}"
          gh repo create "${ORG_NAME}/${REPO_NAME}" --description "${REPO_DESC}" --private
          gh repo transfer "${ORG_NAME}/${REPO_NAME}" --confirm
          gh repo transfer "${ORG_NAME}/${REPO_NAME}" --new-owner "${OWNER_EMAIL}"
          for COLLABORATOR in ${COLLABORATORS}; do
            gh repo collaborator add "${ORG_NAME}/${REPO_NAME}" "${COLLABORATOR}" --write
          done

      - name: Set Output Variables
        run: |
          REPO_NAME="${{ env.REPO_NAME }}"
          ORG_NAME="${{ env.ORG_NAME }}"
          echo "created_repo=${ORG_NAME}/${REPO_NAME}" >> $GITHUB_ENV
